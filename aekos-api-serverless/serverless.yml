service: aekos-api-serverless

package:
  exclude:
    - secrets.yml

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 128
  timeout: 15
  vpc:
    securityGroupIds:
      - "${file(secrets.yml):${self:custom.stage}.securityGroupId}"
    subnetIds:
      - "${file(secrets.yml):${self:custom.stage}.subnet1Id}"
      - "${file(secrets.yml):${self:custom.stage}.subnet2Id}"
  environment:
    # FIXME get these encrypted
    # DBURL: "${self:custom.secrets.DBURL}"
    DBURL: "${file(secrets.yml):${self:custom.stage}.DBURL}"
    # DBPORT: "${self:custom.secrets.DBPORT}"
    DBPORT: "${file(secrets.yml):${self:custom.stage}.DBPORT}"
    # DBNAME: "${self:custom.secrets.DBNAME}"
    DBNAME: "${file(secrets.yml):${self:custom.stage}.DBNAME}"
    # DBUSER: "${self:custom.secrets.DBUSER}"
    DBUSER: "${file(secrets.yml):${self:custom.stage}.DBUSER}"
    # DBPASS: "${self:custom.secrets.DBPASS}"
    DBPASS: "${file(secrets.yml):${self:custom.stage}.DBPASS}"

resources:
  Resources:
    pathmapping:
      Type: AWS::ApiGateway::BasePathMapping
      Properties:
        BasePath: ""
        DomainName: ${self:custom.domainName}
        RestApiId: 
          Ref: ApiGatewayRestApi
        Stage: ${self:custom.stage}
    MockMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: None
        HttpMethod: GET
        ResourceId:
          Fn::GetAtt:
            - ApiGatewayRestApi # our default Rest API logical ID
            - RootResourceId
        RestApiId:
          Ref: ApiGatewayRestApi
        MethodResponses:
          - ResponseModels:
              text/html: Empty
            ResponseParameters:
              method.response.header.Location: true
            StatusCode: 301
        Integration:
          RequestTemplates:
            application/json: |
              {"statusCode": 301}
          Type: MOCK
          IntegrationResponses:
            - ResponseParameters:
                method.response.header.Location: "'${self:custom.documentationUrl}'"
              ResponseTemplates:
                text/html: |
                  <html><body>
                    <p>Redirecting to documentation <a href="${self:custom.documentationUrl}">${self:custom.documentationUrl}</a>
                  </body></html>
              StatusCode: 301

custom:
  stage: ${opt:stage, self:provider.stage}
  secrets: ${file(secrets.yml):$self:custom.stage} # FIXME get this working
  domainName: ${file(secrets.yml):${self:custom.stage}.domainName}
  documentationUrl: https://www.${self:custom.domainName}
  commonModelSchemaFragments:
    SpeciesSummary:
      type: object
      properties:
        id:
          type: string
        recordsHeld:
          type: integer
        speciesName:
          type: string
    ResponseHeader:
      type: object
      properties:
        elapsedTime:
          type: number
        numFound:
          type: number
        pageNumber:
          type: number
        params:
          type: object
          properties:
            rows:
              type: number
            start:
              type: number
            # TODO add other params on a per function basis probably, not sure how that'll work
    AcceptHeaderDoco:
      name: "accept"
      description: "content-type mime that you want as a response e.g.: 'application/json' or 'text/csv'"
    MethodResponse400Json:
      statusCode: 400
      responseModels:
        "application/json": "400JsonResponse"
    MethodResponse502Json:
      statusCode: 502
      responseModels:
        "application/json": "502JsonResponse"
    StartQueryParam:
      name: "${file(./constants.yml):paramNames.START}"
      description: "0-indexed result start index"
    RowsQueryParam:
      name: "${file(./constants.yml):paramNames.ROWS}"
      description: "records per page"
    SingleSpeciesNameQueryParam:
      name: "${file(./constants.yml):paramNames.SINGLE_SPECIES_NAME}"
      description: "single species name"
      required: true
    SingleTraitNameQueryParam:
      name: "${file(./constants.yml):paramNames.SINGLE_TRAIT_NAME}"
      description: "single trait name"
    SingleEnvVarNameQueryParam:
      name: "${file(./constants.yml):paramNames.SINGLE_ENVVAR_NAME}"
      description: "single environmental variable name"
    PageNumQueryParam:
      name: "${file(./constants.yml):paramNames.PAGE_NUM}"
      description: "1-indexed page number"
    PageSizeQueryParam:
      name: "${file(./constants.yml):paramNames.PAGE_SIZE}"
      description: "records per page"
  documentation:
    # FIXME doesn't write to the format that AWS expects: {info: {description: "", version: "", title: "", contact: {name: "", email: ""}}}
    api:
      version: '1'
      summary: 'AEKOS API'
      # description doesn't work so we add it manually after we pull the Swagger from API Gateway
      #    see: https://github.com/9cookies/serverless-aws-documentation/issues/37
    models:
      -
        name: "SpeciesSummaryList"
        contentType: "application/json"
        schema:
          type: array
          items: ${self:custom.commonModelSchemaFragments.SpeciesSummary}
      -
        name: "SpeciesDataResponse"
        contentType: "application/json"
        schema:
          type: object
          properties:
            response:
              type: array
              # FIXME define the object
            responseHeader: ${self:custom.commonModelSchemaFragments.ResponseHeader}
      -
        name: "TraitDataJsonResponse"
        contentType: "application/json"
        schema:
          type: object
          properties:
            response:
              type: array
              # FIXME define the object
            responseHeader: ${self:custom.commonModelSchemaFragments.ResponseHeader}
      -
        name: "EnvDataResponse"
        contentType: "application/json"
        schema:
          type: object
          properties:
            response:
              type: array
              # FIXME define the object
            responseHeader: ${self:custom.commonModelSchemaFragments.ResponseHeader}
      -
        name: "CsvResponse"
        contentType: "text/csv"
        schema:
          type: string
      -
        name: "400JsonResponse"
        contentType: "text/csv"
        schema:
          type: string
      -
        name: "502JsonResponse"
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
      -
        name: "EnvironmentalVariableVocabv1Response"
        contentType: "application/json"
        schema:
          type: object
          properties:
            count:
              type: number
            code:
              type: string
            label:
              type: string

plugins:
  - serverless-aws-documentation

functions:
  v1-getEnvironmentBySpecies-json:
    handler: v1-getEnvironmentBySpecies-json.handler
    events:
      - http:
          path: v1/getEnvironmentBySpecies.json
          method: get
          cors: true
          documentation:
            summary: "Get all available environment variable names for specified species"
            description: |
              Finds the environmental variables that the supplied species have. Note that the result doesn't
              include the value of the environmental variables, it only shows that the supplied species have
              values for those variable. To get the values, you need to use the Data Retrieval services.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.SingleSpeciesNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.PageNumQueryParam}
              - ${self:custom.commonModelSchemaFragments.PageSizeQueryParam}
  v1-getTraitsBySpecies-json:
    handler: v1-getTraitsBySpecies-json.handler
    events:
      - http:
          path: v1/getTraitsBySpecies.json
          method: get
          cors: true
          documentation:
            summary: "Get all available traits for specified species"
            description: |
              Finds the traits that the supplied species have. Note that the result doesn't include the value
              of the traits, it only shows that the supplied species have values for those traits. To get
              the values, you need to use the Data Retrieval services.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.SingleSpeciesNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.PageNumQueryParam}
              - ${self:custom.commonModelSchemaFragments.PageSizeQueryParam}
  v1-getSpeciesByTrait-json:
    handler: v1-getSpeciesByTrait-json.handler
    events:
      - http:
          path: v1/getSpeciesByTrait.json
          method: get
          cors: true
          documentation:
            summary: "Get all available species for specified traits"
            description: |
              Finds the species names that the supplied trait(s). Note that the result only shows that the supplied
              traits have species records present in the system. To get the values, you need to use the Data
              Retrieval services.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.SingleTraitNameQueryParam} # FIXME need to mark as required
              - ${self:custom.commonModelSchemaFragments.PageNumQueryParam}
              - ${self:custom.commonModelSchemaFragments.PageSizeQueryParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.MethodResponse502Json}
  v1-getTraitVocab-json:
    handler: v1-getTraitVocab-json.handler
    events:
      - http:
          path: v1/getTraitVocab.json
          method: get
          cors: true
          documentation:
            summary: "Get trait vocabulary"
            description: |
              Gets a distinct list of all the traits that appear in the system. The code and label are supplied for
              each trait. The codes are required to use as parameters for other resources and the label information
              is useful for creating UIs.
  v1-getEnvironmentalVariableVocab-json:
    handler: v1-getEnvironmentalVariableVocab-json.handler
    events:
      - http:
          path: v1/getEnvironmentalVariableVocab.json
          method: get
          cors: true
          documentation:
            summary: "Get environmental variable vocabulary"
            description: |
              Gets a distinct list of all the environmental variables that appear in the system. The code and label are supplied for
              each trait. The codes are required to use as parameters for other resources and the label information
              is useful for creating UIs.
            methodResponses:
              -
                statusCode: 200
                responseModels:
                  "application/json": "EnvironmentalVariableVocabv1Response"
              - ${self:custom.commonModelSchemaFragments.MethodResponse502Json}
  v1-speciesAutocomplete-json:
    handler: v1-speciesAutocomplete-json.handler
    events:
      - http:
          path: v1/speciesAutocomplete.json
          method: get
          cors: true
          documentation:
            summary: "Autocomplete partial species names"
            description: |
              Performs an autocomplete on the partial species name supplied. Results starting with the supplied
              fragment will be returned ordered by most relevant.
            queryParams:
              -
                name: "q"
                description: "partial species name"
  v1-speciesSummary-json:
    handler: v1-speciesSummary-json.handler
    events:
      - http:
          path: v1/speciesSummary.json
          method: get
          cors: true
          documentation:
            summary: "Get a summary of the specified species names"
            description: |
              A summary of the information that the system holds on the supplied species name(s) including a count
              of records. If the system doesn't have any data on a species name, no record for the species name will
              be in the result.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.SingleSpeciesNameQueryParam}
            methodResponses:
              -
                statusCode: 200
                responseModels:
                  "application/json": "SpeciesSummaryList"
  v1-speciesData:
    handler: v1-speciesData.handler
    events:
      - http:
          path: v1/speciesData
          method: get
          cors: true
          documentation:
            summary: "Get species data"
            description: |
              Gets Darwin Core records for the supplied species name(s) using content negotation to determine the response type.
              This resource honours Accept headers represented by any of the /speciesData.* resources.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.SingleSpeciesNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            methodResponses:
              -
                statusCode: 200
                responseModels:
                  "text/csv": "CsvResponse"
                  "application/json": "SpeciesDataResponse"
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
  # TODO change the v1.0 response to not include the new fields, add a v1.1 to have the fields
  v1-speciesData-json:
    handler: v1-speciesData-json.handler
    events:
      - http:
          path: v1/speciesData.json
          method: get
          cors: true
          documentation:
            summary: "Get species data in JSON format"
            description: |
              Gets Darwin Core records for the supplied species name(s) in JSON format.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.SingleSpeciesNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            methodResponses:
              -
                statusCode: 200
                responseModels:
                  "application/json": "SpeciesDataResponse"
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
  v1-speciesData-csv:
    handler: v1-speciesData-csv.handler
    events:
      - http:
          path: v1/speciesData.csv
          method: get
          cors: true
          documentation:
            summary: "Get species data in CSV format"
            description: |
              Gets Darwin Core records for the supplied species name(s) in CSV format.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.SingleSpeciesNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            methodResponses:
              -
                statusCode: 200
                responseModels:
                  "text/csv": "CsvResponse"
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
  v1-traitData:
    handler: v1-traitData.handler
    events:
      - http:
          path: v1/traitData
          method: get
          cors: true
          documentation:
            summary: "Get trait data"
            description: |
              Gets Darwin Core records with added trait information for the supplied species name(s) using content negotation to
              determine the response type. If you supply trait names then the result records will have the traits filtered down
              to only the traits you've asked for, otherwise all traits are returned. This resource honours Accept headers
              represented by any of the /traitData.* resources.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.SingleSpeciesNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.SingleTraitNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            requestHeaders:
               # TODO not sure if it's worth putting this here, the Swagger UI already has an input for it
              - ${self:custom.commonModelSchemaFragments.AcceptHeaderDoco}
            methodResponses:
              -
                statusCode: 200
                responseModels:
                  "text/csv": "CsvResponse"
                  "application/json": "TraitDataJsonResponse"
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
  v1-traitData-json:
    handler: v1-traitData-json.handler
    events:
      - http:
          path: v1/traitData.json
          method: get
          cors: true
          documentation:
            summary: "Get trait data in JSON format"
            description: |
              Gets Darwin Core records with added trait information in JSON format. If you supply trait names then the result
              records will have the traits filtered down to only the traits you've asked for, otherwise all traits are returned.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.SingleSpeciesNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.SingleTraitNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            methodResponses:
              -
                statusCode: 200
                responseModels:
                  "application/json": "TraitDataJsonResponse"
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
  v1-traitData-csv:
    handler: v1-traitData-csv.handler
    events:
      - http:
          path: v1/traitData.csv
          method: get
          cors: true
          documentation:
            summary: "Get trait data in CSV format"
            description: |
              Gets Darwin Core records with added trait information in CSV format. If you supply trait names then the result
              records will have the traits filtered down to only the traits you've asked for, otherwise all traits are returned.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.SingleSpeciesNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.SingleTraitNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            methodResponses:
              -
                statusCode: 200
                responseModels:
                  "text/csv": "CsvResponse"
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
  v1-environmentData:
    handler: v1-environmentData.handler
    events:
      - http:
          path: v1/environmentData
          method: get
          cors: true
          documentation:
            summary: "Get environmental variable data"
            description: |
              "Gets environmental variable data records for the site/study location/plot visits that the supplied species name(s)
              appear at using content negotation to determine the response type. If you supply environmental variable names then
              the result will have the environmental variables filtered down to only the environmental variables you've asked for,
              otherwise all environmental variables are returned. Note: not all sites have environmental variables available.
              This resource honours Accept headers represented by any of the /environmentData.* resources."
            queryParams:
              - ${self:custom.commonModelSchemaFragments.SingleSpeciesNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.SingleEnvVarNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            methodResponses:
              -
                statusCode: 200
                responseModels:
                  "text/csv": "CsvResponse"
                  "application/json": "EnvDataResponse"
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
  v1-environmentData-json:
    handler: v1-environmentData-json.handler
    events:
      - http:
          path: v1/environmentData.json
          method: get
          cors: true
          documentation:
            summary: "Get environmental variable data in JSON format"
            description: |
              "Gets environmental variable data records for the site/study location/plot visits that the supplied species name(s)
              appear at in JSON format. If you supply environmental variable names then the result will have the environmental
              variables filtered down to only the environmental variables you've asked for, otherwise all environmental
              variables are returned. Note: not all sites have environmental variables available."
            queryParams:
              - ${self:custom.commonModelSchemaFragments.SingleSpeciesNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.SingleEnvVarNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            methodResponses:
              -
                statusCode: 200
                responseModels:
                  "application/json": "EnvDataResponse"
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
  v1-environmentData-csv:
    handler: v1-environmentData-csv.handler
    events:
      - http:
          path: v1/environmentData.csv
          method: get
          cors: true
          documentation:
            summary: "Get environmental variable data in CSV format"
            description: |
              "Gets environmental variable data records for the site/study location/plot visits that the supplied species name(s)
              appear at in CSV format. If you supply environmental variable names then the result will have the environmental
              variables filtered down to only the environmental variables you've asked for, otherwise all environmental
              variables are returned. Note: not all sites have environmental variables available."
            queryParams:
              - ${self:custom.commonModelSchemaFragments.SingleSpeciesNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.SingleEnvVarNameQueryParam}
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            methodResponses:
              -
                statusCode: 200
                responseModels:
                  "text/csv": "CsvResponse"
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
